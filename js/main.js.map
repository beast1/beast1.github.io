{"version":3,"names":[],"mappings":"","sources":["main.js"],"sourcesContent":["const getData = (callback) => {\n  const xhr = new XMLHttpRequest();\n  xhr.open(\"GET\", \"./js/data/data.json\");\n  xhr.send();\n  xhr.onreadystatechange = function() {\n    if (this.readyState == 4 && this.status == 200) {\n      callback(JSON.parse(this.responseText))\n    }\n  };\n}\nconst renderWeek = () => {\n  const parent = document.querySelector(`main.schedule`);\n  const weekHtml = `\n    <button class=\"schedule__clean\">Clean</button>\n    <button class=\"schedule__save\">Save</button>  \n    <small>*В ТЗ нет url на который нужно отправить результат сохранения, так что я просто дропнул объект в консоль</small>\n  `;\n  const template     = document.createElement(`template`);\n  template.innerHTML = weekHtml;\n  parent.appendChild(template.content.cloneNode(true));\n}\nconst renderDay = (name, hours) => {\n  const parent = document.querySelector(`main.schedule`);\n  const btnAllDayHtml = (hours) => {\n    if (hours.filter(item => item === false).length === 0) {\n      return `<div class=\"schedule__all-day  schedule__all-day_checked\"></div>`\n    } else {\n      return `<div class=\"schedule__all-day\"></div>`\n    }\n  }\n  const dayHtml = `   \n      <div class=\"schedule__day  schedule__day_${name}\">\n        <div class=\"schedule__label\">${name}</div>\n        ${btnAllDayHtml(hours)}\n        <div class=\"schedule__hours-list\">\n          ${\n            hours.map((hour) => {\n              if (hour === true) {\n                return `<div class=\"schedule__hours-item  schedule__hours-item_checked\"></div>`\n              } else {\n                return `<div class=\"schedule__hours-item\"></div>`\n              }\n            }).join(``)\n          }\n        </div>\n      </div>\n    `;\n  const template     = document.createElement(`template`);\n  template.innerHTML = dayHtml;\n  parent.appendChild(template.content.cloneNode(true));\n}\n// paint/clean\nclass Day {\n  constructor(name, sockets) {\n    this.sockets       = sockets;\n    this.root          = document.querySelector(`.schedule__day_${name}`);\n    this.hourToggleArr = this.root.querySelectorAll(`.schedule__hours-item`);\n    this.dayToggle     = this.root.querySelector(`.schedule__all-day`);\n    this.hourToggleArr.forEach(item => {\n      item.addEventListener(`click`, (e) => {\n        e.target.classList.toggle(`schedule__hours-item_checked`);\n        this.dayToggle.classList.remove(`schedule__all-day_checked`);\n        this.updateSockets();\n      });\n    });\n    this.dayToggle.onclick = () => {\n      if (this.dayToggle.classList.contains(`schedule__all-day_checked`)) {\n        this.hourToggleArr.forEach((item) => {\n          item.classList.remove(`schedule__hours-item_checked`);\n        });\n        this.dayToggle.classList.remove(`schedule__all-day_checked`);\n        this.updateSockets();\n      } else {\n        this.hourToggleArr.forEach((item) => {\n          item.classList.add(`schedule__hours-item_checked`);\n        });\n        this.dayToggle.classList.add(`schedule__all-day_checked`);\n        this.updateSockets();\n      }\n    };\n  }\n\n  updateSockets() {\n    this.hourToggleArr.forEach((item, i) => {\n      if (item.classList.contains(`schedule__hours-item_checked`)) {\n        this.sockets[i] = true;\n      } else {\n        this.sockets[i] = false;\n      }\n    });\n  }\n\n  cleanDay() {\n    this.dayToggle.classList.remove(`schedule__all-day_checked`);\n    this.hourToggleArr.forEach((item) => {\n      item.classList.remove(`schedule__hours-item_checked`);\n    })\n    this.updateSockets();\n  }\n}\nclass Week {\n  constructor(days) {\n    this.days = days;\n    this.btnClean = document.querySelector(`.schedule__clean`);\n    this.btnClean.onclick = (e) => this.clean(e);\n    this.btnSave = document.querySelector(`.schedule__save`);\n    this.btnSave.onclick = (e) => this.save(e);\n  }\n\n  clean() {\n    Object.keys(this.days).map((day) => {\n      this.days[day].cleanDay();\n      this.days[day].updateSockets();\n    });\n  }\n\n  save() {\n    const savedData = {};\n    const socketToMinutes = (socket, isBt) => {\n      if (socket === 0) {\n        return 0;\n      } else if (isBt) {\n        return Math.floor((socket - 1) * 60);\n      } else {\n        return Math.floor((socket - 1) * 60) - 1;\n      }\n    }\n    const matchDayIntervals = (sockets) => {\n      const intervals = [];\n      let isBeginSearch = true;\n      let fromIndex = 0;\n      let intervalCounter = 0;\n      for (let i = fromIndex; i < sockets.length; i++) {\n        if (sockets[i] === isBeginSearch) {\n          if (isBeginSearch) {\n            intervals.push({});\n            intervals[intervalCounter].bt = socketToMinutes(i, true);\n          } else {\n            intervals[intervalCounter].et = socketToMinutes(i, false);\n            intervalCounter = intervalCounter + 1;\n          }\n          isBeginSearch = !isBeginSearch;\n          fromIndex = i - 1;\n        } else if (i + 1 === sockets.length && isBeginSearch === false) {\n          intervals[intervalCounter].et = socketToMinutes(i + 2, false);\n        }\n      }\n      return intervals;\n    };\n    Object.keys(this.days).map((day) => {\n      savedData[day] = matchDayIntervals(this.days[day].sockets);\n    });\n    console.dir(savedData);\n  }\n}\n\ngetData((response) => {\n  const days = [];\n  Object.keys(response).map((item) => {\n    const sockets = [];\n    for (let i = 0; i < 24; i++) {\n      sockets.push(false);\n    }\n    for (let i = 0; i < response[item].length; i++) {\n      for (let j = 0; j < sockets.length; j++) {\n        if (j >= Math.ceil((response[item][i].bt + 1) / 60)) {\n          if (j <= Math.ceil((response[item][i].et + 1) / 60)) {\n            sockets[j] = true;\n          }\n        } else if (j === response[item][i].bt) {\n          sockets[j] = true;\n        }\n      }\n    }\n    renderDay(item, sockets);\n    days[item] = new Day(item, sockets);\n  });\n  renderWeek();\n  new Week(days);\n});\n\n\n\n"],"file":"main.js"}